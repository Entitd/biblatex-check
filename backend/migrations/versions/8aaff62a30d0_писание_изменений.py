"""–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π

Revision ID: 8aaff62a30d0
Revises: 222d0d07d0ab
Create Date: 2025-04-08 19:45:14.438262

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.engine.reflection import Inspector # <-- –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å

# ... (revision, down_revision, etc.)
revision: str = '8aaff62a30d0'
down_revision: Union[str, None] = '222d0d07d0ab'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def upgrade() -> None:
    # ===== –≠–¢–û –î–û–õ–ñ–ù–û –ë–´–¢–¨ –°–ê–ú–´–ú –ü–ï–†–í–´–ú =====
    bind = op.get_bind()
    inspector = Inspector.from_engine(bind)

    # 1. –ü–†–û–í–ï–†–ö–ê –ò –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ 'blacklisted_tokens'
    if 'blacklisted_tokens' not in inspector.get_table_names():
        op.create_table('blacklisted_tokens',
            sa.Column('id', sa.Integer(), nullable=False),
            sa.Column('token', sa.String(), nullable=False, unique=True),
            sa.Column('blacklisted_on', sa.DateTime(), nullable=True),
            sa.PrimaryKeyConstraint('id') 
        )
        print("INFO: –¢–∞–±–ª–∏—Ü–∞ 'blacklisted_tokens' –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∞.")
    # ========================================

    # 2. –ò–ó–ú–ï–ù–ï–ù–ò–ï –ö–û–õ–û–ù–û–ö (Alter Columns)
    # –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –º—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º—ã –º–æ–∂–µ–º –µ–µ –∏–∑–º–µ–Ω–∏—Ç—å.
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ 'id' (–£—Å—Ç–∞–Ω–æ–≤–∫–∞ nullable=False)
    # –≠—Ç–æ—Ç –±–ª–æ–∫ op.alter_column –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–¥–µ—Å—å!
    op.alter_column('blacklisted_tokens', 'id',
               existing_type=sa.INTEGER(),
               nullable=False,
               autoincrement=True)
    
    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ 'blacklisted_on' (–°–º–µ–Ω–∞ —Ç–∏–ø–∞)
    op.alter_column('blacklisted_tokens', 'blacklisted_on',
            existing_type=sa.VARCHAR(),
            type_=sa.DateTime(),
            existing_nullable=True,
            postgresql_using='blacklisted_on::timestamp')

    # 3. –°–û–ó–î–ê–ù–ò–ï –ò–ù–î–ï–ö–°–û–í
    # –ï—Å–ª–∏ –≤—ã —Å–æ–∑–¥–∞–ª–∏ —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –®–∞–≥–µ 1, –∏–Ω–¥–µ–∫—Å—ã, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Ç–∞–∫–∂–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å.
    # –≠—Ç–æ—Ç –∫–æ–¥ —Ç–µ–ø–µ—Ä—å –±–µ–∑–æ–ø–∞—Å–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–±–ª–∏—Ü–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    indexes = inspector.get_indexes('blacklisted_tokens')
    if not any(idx['name'] == 'ix_blacklisted_tokens_id' for idx in indexes):
        op.create_index(op.f('ix_blacklisted_tokens_id'), 'blacklisted_tokens', ['id'], unique=False)
    if not any(idx['name'] == 'ix_blacklisted_tokens_token' for idx in indexes):
        op.create_index(op.f('ix_blacklisted_tokens_token'), 'blacklisted_tokens', ['token'], unique=True)

        
    # 4. –û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö (examinations, users)
    op.alter_column('examinations', 'loading_at',
           existing_type=sa.VARCHAR(),
           type_=sa.DateTime(),
           existing_nullable=True,
           postgresql_using='loading_at::timestamp')
    # –î–ª—è course_compliance
    op.alter_column('examinations', 'course_compliance',
            existing_type=sa.VARCHAR(),
            type_=sa.Integer(),
            existing_nullable=True,
            postgresql_using='course_compliance::integer')
    # –î–ª—è last_active


    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å bind –∏ inspector, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –≤ upgrade()
    columns = inspector.get_columns('examinations')
    column_names = [col['name'] for col in columns]

    if 'session_id' not in column_names:
        op.add_column('examinations', sa.Column('session_id', sa.String(), nullable=True))
        print("INFO: –ö–æ–ª–æ–Ω–∫–∞ 'session_id' –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ examinations, —Ç–∞–∫ –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∞.")
        
    # üí• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ 'last_active', –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if 'last_active' not in column_names:
        # –í–∞–∂–Ω–æ: —Å–æ–∑–¥–∞–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Ç–∏–ø–æ–º sa.String(), —á—Ç–æ–±—ã –µ–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å
        op.add_column('examinations', sa.Column('last_active', sa.VARCHAR(), nullable=True))
        print("INFO: –ö–æ–ª–æ–Ω–∫–∞ 'last_active' –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ examinations, —Ç–∞–∫ –∫–∞–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª–∞.")

    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –º–µ–Ω—è—Ç—å —Ç–∏–ø –∫–æ–ª–æ–Ω–∫–∏ (–í–∞—à –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥)
    op.alter_column('examinations', 'last_active',
            existing_type=sa.VARCHAR(),
            type_=sa.DateTime(),
            existing_nullable=True,
            postgresql_using='last_active::timestamp')

    # ... –∏ –¥–∞–ª–µ–µ —Å–ª–µ–¥—É—é—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ alter_column –∏ create_index –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
    
    indexes = inspector.get_indexes('examinations')
    if not any(idx['name'] == 'ix_examinations_id_examination' for idx in indexes):
        op.create_index(op.f('ix_examinations_id_examination'), 'examinations', ['id_examination'], unique=False)
    if not any(idx['name'] == 'ix_examinations_last_active' for idx in indexes):
        op.create_index(op.f('ix_examinations_last_active'), 'examinations', ['last_active'], unique=False)
    
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(),
               nullable=True)
    
    indexes = inspector.get_indexes('users')
    if not any(idx['name'] == 'ix_users_email' for idx in indexes):
        op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    if not any(idx['name'] == 'ix_users_id_user' for idx in indexes):
        op.create_index(op.f('ix_users_id_user'), 'users', ['id_user'], unique=False)
    if not any(idx['name'] == 'ix_users_username' for idx in indexes):
        op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    
    op.drop_column('users', 'register_at')

def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('register_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id_user'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.alter_column('users', 'username',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.drop_index(op.f('ix_examinations_last_active'), table_name='examinations')
    op.drop_index(op.f('ix_examinations_id_examination'), table_name='examinations')
    op.alter_column('examinations', 'last_active',
               existing_type=sa.DateTime(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('examinations', 'course_compliance',
               existing_type=sa.Integer(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('examinations', 'loading_at',
               existing_type=sa.DateTime(),
               type_=sa.VARCHAR(),
               existing_nullable=True)


    op.drop_index(op.f('ix_blacklisted_tokens_token'), table_name='blacklisted_tokens')
    op.drop_index(op.f('ix_blacklisted_tokens_id'), table_name='blacklisted_tokens')
    op.alter_column('blacklisted_tokens', 'blacklisted_on',
               existing_type=sa.DateTime(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('blacklisted_tokens', 'id',
               existing_type=sa.INTEGER(),
               nullable=True,
               autoincrement=True)
    # ### end Alembic commands ###
